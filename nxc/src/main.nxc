// command-line: nbc -S=usb -d main.nxc

/* Directions */
#define BAPI_DIR_Y_POS                  0
#define BAPI_DIR_X_POS                  1
#define BAPI_DIR_Y_NEG                  2
#define BAPI_DIR_X_NEG                  3

/* Map */
#define BAPI_INIT_MAP_DIM_X             100
#define BAPI_INIT_MAP_DIM_Y             100

/* Robot */
#define BAPI_INIT_START_X               0
#define BAPI_INIT_START_Y               0
#define BAPI_INIT_START_DIR             BAPI_DIR_Y_POS

/* Goal */
#define BAPI_INIT_GOAL_X                100
#define BAPI_INIT_GOAL_Y                100

/* Movement */
#define BAPI_MOVE_SPEED                 100
#define BAPI_MOVE_TACH_PER_INCH         104

/* Turning */
#define BAPI_TURN_SPEED                 75
#define BAPI_TURN_RIGHT_DURATION_1_DEG  (1475 / 90)
#define BAPI_TURN_LEFT_DURATION_1_DEG   (1300 / 90)

/* Kicking */
#define BAPI_KICK_MOTOR                 OUT_A
#define BAPI_KICK_MOTION_RANGE          40
#define BAPI_KICK_RESET_DELAY           10
#define BAPI_KICK_SPEED                 100
#define BAPI_KICK_RESET_SPEED           50

/* Sensors */
#define BAPI_SENSOR_UPDATE_FREQ         10

/* Touch Sensor */
#define BAPI_SENSE_TOUCH_SENSOR         S1

/* Light Sensor */
#define BAPI_SENSE_LIGHT_SENSOR         S2
#define BAPI_SENSE_LIGHT_FIELD          45
#define BAPI_SENSE_LIGHT_BALL           50

/* Context - The current context of the system. */
struct GLOBAL_CONTEXT
{
    /* Sensors */
    bool        sensor_detect_light;
    bool        sensor_detect_touch;
    int         map_dim[2];
    int         current_pos[2];
    int         current_dir;
    int         goal_pos[2];
};

/* Global Context (state) */
GLOBAL_CONTEXT  gContext;

/* BAPI error handler */
void BAPI_Error ()
{
    // TODO: Add something useful here like a beep or log errors...

    return;
}

/* BAPI status handler.  Display status information on the screen. */
void BAPI_Status (int   val)
{
    /* Display the value on the screen. */
    NumOut(50, 10, val);
    return;
}

/* Basic movement for the distance specified (in inches).  Negative value moves
   backward and positive value moves forward. */
void BAPI_Move (int distance)
{
    /* Check for zero movement */
    if (distance != 0)
    {
        /* Determine movement direction */
        if (distance > 0)
        {
            /* Start motors going forward at 100%. */
            int previous = abs(MotorTachoCount(OUT_B));
            OnRev(OUT_BC, BAPI_MOVE_SPEED);
            until(abs(abs(MotorTachoCount(OUT_B)) - previous) >= (distance * BAPI_MOVE_TACH_PER_INCH));
        }
        else
        {
            /* Start motors going backward at 100%. */
            int previous = abs(MotorTachoCount(OUT_B));
            OnFwd(OUT_BC, BAPI_MOVE_SPEED);
            until(abs(MotorTachoCount(OUT_B)) - previous >= (-distance * BAPI_MOVE_TACH_PER_INCH));
        }
        Off(OUT_BC);
    }
}

/* Move using many single-unit moves. */
void BAPI_Intervallic_Move(int ivl)
{
    int i;

    for(i = 0; i < ivl; i++)
    {
        BAPI_Move(1);
        //Wait(5);
    }

     return;
}

/* Turn the number of degrees specified by rotation (negative is left and
   positive is right). */
void BAPI_Turn (int rotation)
{
    int     duration;

    /* Check for zero rotation */
    if (rotation != 0)
    {
        /* Determine rotation direction */
        if (rotation < 0)
        {
            /* Start motors to turn left. */
            OnFwd(OUT_B, BAPI_TURN_SPEED);
            OnRev(OUT_C, BAPI_TURN_SPEED);
            duration = (abs(rotation) * BAPI_TURN_LEFT_DURATION_1_DEG);
        }
        else
        {
            /* Start motor to turn right. */
            OnFwd(OUT_C, BAPI_TURN_SPEED);
            OnRev(OUT_B, BAPI_TURN_SPEED);
            duration = (abs(rotation) * BAPI_TURN_RIGHT_DURATION_1_DEG);
        }

        /* Run motors long enough to turn specified rotation */
        Wait(duration);

        /* Turn off motors. */
        Off(OUT_BC);
    }
    return;
}

/* Kick the ball */
void BAPI_Kick()
{
    RotateMotor(BAPI_KICK_MOTOR, BAPI_KICK_SPEED, (-1 * BAPI_KICK_MOTION_RANGE));
    Wait(BAPI_KICK_RESET_DELAY);
    Off(BAPI_KICK_MOTOR);
    RotateMotor(BAPI_KICK_MOTOR, BAPI_KICK_RESET_SPEED, BAPI_KICK_MOTION_RANGE);
}

/* Kick the ball at the goal */
void BAPI_Kick_Ball_At_Goal()
{
    // TODO: Try to somehow kick the ball in the general goal direction...

    BAPI_Kick();

    // TODO: After kick may want to sweep the current area in case ball didn't go far...

    return;
}

/* Look for the ball */
void BAPI_Search_For_Ball ()
{
    while(gContext.sensor_detect_light == false)
    {
        if (gContext.sensor_detect_touch == false)
        {
            BAPI_Move(1);
        }
        else
        {
            BAPI_Move(-2);
            Wait(10);
            BAPI_Turn(-45);
        }
    }

    return;
}

/* Task to updated sensor information in the global context. */
task BAPI_Task_Sensor ()
{
    int     sensor_val;

    while (1)
    {
        /* Update light sensor */
        sensor_val = Sensor(BAPI_SENSE_LIGHT_SENSOR);
        if (sensor_val >= BAPI_SENSE_LIGHT_FIELD)
        {
            gContext.sensor_detect_light = true;
        }
        else
        {
            gContext.sensor_detect_light = false;
        }

        /* Output current sensor value */
        BAPI_Status(sensor_val);

        /* Update touch sensor */
        sensor_val = Sensor(BAPI_SENSE_TOUCH_SENSOR);
        gContext.sensor_detect_touch = sensor_val;

        /* Delay to effect update frequency (Hz) */
        Wait(1000 / BAPI_SENSOR_UPDATE_FREQ);
    }
}

/* Initialize the global context and sensors. */
void BAPI_Init (int map_dim_x, int map_dim_y, int start_x, int start_y, int start_dir, int goal_x, int goal_y)
{
    /* Initialize the global context */
    gContext.sensor_detect_light = false;
    gContext.sensor_detect_touch = false;
    gContext.map_dim[0] = map_dim_x;
    gContext.map_dim[1] = map_dim_y;
    gContext.current_pos[0] = start_x;
    gContext.current_pos[1] = start_y;
    gContext.current_dir = start_dir;
    gContext.goal_pos[0] = goal_x;
    gContext.goal_pos[1] = goal_y;

    /* Initialize sensors */
    SetSensorLight(BAPI_SENSE_LIGHT_SENSOR);
    SetSensorTouch(BAPI_SENSE_TOUCH_SENSOR);

    /* Start tasks */
    start BAPI_Task_Sensor;
    return;
}

/* Main task */
task main ()
{
    BAPI_Init(BAPI_INIT_MAP_DIM_X,
              BAPI_INIT_MAP_DIM_Y,
              BAPI_INIT_START_X,
              BAPI_INIT_START_Y,
              BAPI_INIT_START_DIR,
              BAPI_INIT_GOAL_X,
              BAPI_INIT_GOAL_Y);

    while (1)
    {
        BAPI_Search_For_Ball();
        BAPI_Kick_Ball_At_Goal();
    }

}
